00 01 02  03 04 05  06 07 08
10 11 12  13 14 15  16 17 18
20 21 22  23 24 25  26 27 28

30 31 32  33 34 35  36 37 38
40 41 42  43 44 45  46 47 48
50 51 52  53 54 55  56 57 58

60 61 62  63 64 65  66 67 68
70 71 72  73 74 75  76 77 78
80 81 82  83 84 85  86 87 88


n = i*10 + j // by skipping 9 for example we can have a better way to find east and west neighbors of edge cells.
// the eastNeighbor of 08 is 08 +1 = 09, that would take us normaly to the next row but we want to have null as the eastNeighbor of 08
// same of westNeighbor of 10, we want to have null as the westNeighbor of 10, but doing it normal we will get 08 as the westNeighbor of 09
iteration0: i = 0, j = 0, n = 0
iteration1: i = 0, j = 1, n = 1
iteration2: i = 0, j = 2, n = 2
...
iteration8: i = 0, j = 8, n = 8


iteration9: i = 1, j = 0, n = 10
iteration10: i = 1, j = 1, n = 11
iteration11: i = 1, j = 2, n = 12
...
iteration17: i = 1, j = 8, n = 18

iteration18: i = 2, j = 0, n = 20
iteration19: i = 2, j = 1, n = 21
iteration20: i = 2, j = 2, n = 22
...
iteration26: i = 2, j = 8, n = 28


northNeighbor :: Int -> Int
northNeighbor n = n - 9

southNeighbor :: Int -> Int
southNeighbor n = n + 9

westNeighbor :: Int -> Int
westNeighbor n = n - 1

eastNeighbor :: Int -> Int
eastNeighbor n = n + 1
